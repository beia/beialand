#!/usr/bin/env python
from __future__ import print_function
from datetime import datetime
from collections import OrderedDict
import sys
import subprocess
import json
# all the strings types from the current Python version
string_types = ("".__class__, u"".__class__)

class Yaml:
    def __init__(self, f=sys.stdout, indent=2):
        self.file = f
        self.indent = indent

    def dump(self, obj, prefix=None):
        if not prefix:
            prefix = ''
        for key, value in obj.items():
            if value is None:
                self.file.write(prefix + '%s:\n' % (key,))
            elif isinstance(value, bool):
                self.file.write(prefix + "%s: %s\n" % (key, 'true' if value else 'false'))
            elif isinstance(value, string_types):
                self.file.write(prefix + "%s: '%s'\n" % (key, value))
            elif isinstance(value, dict):
                self.file.write(prefix + '%s:\n' % (key,))
                self.dump(value, prefix + ' ' * self.indent)
            elif isinstance(value, list):
                self.file.write(prefix + '%s:\n' % (key,))
                for v in value:
                    self.file.write(prefix + ' - ' + v + '\n')

class Application:
    def add_service(self, container):
        name = container['name']
        image = container.get('image', 'wordpress')
        vol_name = container.get('vol_name', 'cnt_' + name)
        volume = vol_name + ':/var/www/html/wp-content'
        depends_on = ','.join(container.get('depends', ['db']))
        db_password = container.get('db_password', 'example')
        db_name = container.get('db_name', name + '_db')
        virtual_hosts = ','.join(container['virtual_hosts'])

        self.stack['services'][name] = {
            'image': image,
            # 'restart': 'always', # TODO: remove
            'volumes': [volume],
            # 'depends_on': [depends_on],
            'networks': [self.db_network, self.external_network],
            'environment': {
                'WORDPRESS_DB_HOST': self.db_container_name,
                'WORDPRESS_DB_PASSWORD': db_password,
                'WORDPRESS_DB_NAME': db_name,
                'VIRTUAL_HOST': virtual_hosts,
                'LETSENCRYPT_HOST': virtual_hosts,
                'LETSENCRYPT_EMAIL': 'ssl-contact@beia.ro',
            }
        }
        self.stack['volumes'][vol_name] = None

    def add_network(self, network):
        if network['type'] == 'external':
            self.external_network = name = network['name']
            self.stack['networks'][name] = {
                'external': True
            }
        elif network['type'] == 'db':
            self.db_network = name = network['name']
            self.stack['networks'][name] = None

    def add_db(self, config):
        name = config.get('name', 'db')
        image = config.get('image', 'mysql')
        password = config.get('root_pwd', 'example')
        vol_name = config['volume']
        volume = vol_name + ':/var/lib/mysql'

        self.db_container_name = name
        self.stack['services'][name] = {
            'image': image,
            'volumes': [volume],
            'networks': [self.db_network],
            'environment': {
                'MYSQL_ROOT_PASSWORD': password
            }
        }
        self.stack['volumes'][vol_name] = None

    def dump(self):
        yaml = Yaml()
        sys.stdout.write('#' * 64 + '\n')
        sys.stdout.write('# This file is autogenerated, changes to it will be discarded\n')
        sys.stdout.write('# Date: %s\n' % datetime.now())
        if self.git_commit:
            sys.stdout.write('# Git commit: %s\n' % self.git_commit)
        sys.stdout.write('#' * 64 + '\n')
        yaml.dump(self.stack)

    @property
    def git_commit(self):
        if not hasattr(self, '_git_commit'):
            try:
                commit = subprocess.run(
                    ['git', 'rev-parse', 'HEAD'],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                ).stdout.decode('utf-8').strip()
            except:
                commit = ''
            if len(commit) == 0:
                commit = None
            self._git_commit = commit
        return self._git_commit

    def run(self):
        self.config = json.load(sys.stdin)
        self.stack = dict(version='3.6', services={}, volumes={}, networks={})
        for network in self.config['settings']['networks']:
            self.add_network(network)
        self.add_db(self.config['settings']['db'])
        for container in self.config['containers']:
            self.add_service(container)
        self.dump()

if __name__ == '__main__':
    app = Application()
    app.run()
